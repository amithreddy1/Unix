//seg1_string.c
#include <stdio.h>
#include <stdlib.h>

struct BSTNode{
    int data;
    struct BSTNode *left;
    struct BSTNode *right;
};

int insertnode(struct BSTNode **root, int data){
    if(!(*root)){
        struct BSTNode *newnode=(struct BSTNode *)malloc(sizeof(struct BSTNode));
        if(!newnode) return 0;
        newnode->data=data;
        newnode->left=newnode->right=NULL;
        *root=newnode;
        return 1;
    }
    else if((*root)->data>data){
        return insertnode(&(*root)->left, data);
    }
    else if((*root)->data<data){
        return insertnode(&(*root)->right, data);
    }
    else
        return 0;
}

int inorder(struct BSTNode *root){
    if(root){
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
        return 1;
    }
    return 1;
}

int findmin(struct BSTNode *root){
    while(root->left)
        root=root->left;
    return root->data;
}

int inordersuccessor(struct BSTNode *root, int key){
    struct BSTNode *succ=NULL;
    while(root!=NULL){
        if (root->data == key && root->right != NULL)
            return findmin(root->right);
        else if (key < root->data)
        {
            succ = root;
            root = root->left;
        }
        else if (key > root->data)
            root = root->right;
        else
            break;
    }
    return succ->data;
}

int main(){
    int n;
    printf("Enter the number of nodes in the BST");
    scanf("%d",&n);

    struct BSTNode *root=NULL;
    while(n--){
        int elem;
        printf("Enter node value: ");
        scanf("%d", &elem);

        insertnode(&root, elem);
    }

    int key;
    printf("Enter number to find successor of: ");
    scanf("%d",&key);

    int succ=inordersuccessor(root, key);
    printf("Successor: %d", succ);

    return 0;
}








//gdb_prog2.c
#include <stdio.h>
#include <stdlib.h>

struct node{
	int data;
	struct node *next;
};


struct node *head;

int initList(struct node **head){
	*head=NULL;
	return 1;
}


int search(struct node **head, int data, struct node **ptrToKey, int *pos){
	if (*head==NULL) return 0;
	*pos=1;
	struct node *ptr=*head;
	for (;ptr!=NULL && ptr->data!=data;ptr=ptr->next){
		*pos=(*pos)+1;
	}
		*ptrToKey=ptr;
	
	if (!ptr) return 0;
	return 1;
}


int insert(struct node **head, int position, int data){
	struct node *newnode=(struct node *)malloc(sizeof(struct node));
	if (newnode==NULL) return 0;

	newnode->data=data;
	if (position==1){
		newnode->next=*head;
		*head = newnode;
		return 1;
	}
	//to make sure there are no duplicate insertions we search if given data is already present in linked list
	struct node *ptrToKey=NULL;
	int pos=0;
	if (!search(head, data,&ptrToKey, &pos)){
		struct node *ptr=*head;
		for (int i=1; i<position-1 && ptr!=NULL;i++)
			ptr=ptr->next;
		
		if (ptr==NULL) return 0;
		else{
			newnode->next=ptr->next;
			ptr->next=newnode;
			return 1;
		}
	}
	else{
		printf("Element already present in address: %p \n",ptrToKey);
		return 0;
	}
}

int traverse(struct node *head){
	if (!head){
		printf("NULL \n");
		return 1;
	}
	
	for (struct node *ptr=head;ptr!=NULL;ptr=ptr->next)
		printf("%d -->",ptr->data);
	printf("NULL \n");
	return 1;
}

int kFromLast(struct node *head, int k ,int *data){
	if(!head) return 0;
	struct node *fast=head;
	struct node *slow=NULL;
	int i=1;
	
	while(fast!=NULL && i<=k){
		fast=fast->next;
		i++;
	}
	if(fast==NULL && i<k) return 0;
	slow=head;
	while(fast!=NULL){
		slow=slow->next;
		fast=fast->next;
	}
	*data=slow->data;
	return 1;
}

int main(){
	struct node *head;
	initList(&head);
	int n;

	printf("Enter no of nodes you want to enter data: ");
	scanf("%d",&n);
	int pos=1;
	while (n--){
		int data;
		printf("\nEnter data: ");
		scanf("%d",&data);
		if (!insert(&head,pos++,data)) return 0;
	}
	
	printf("\nThe current linked list is:\n");
	traverse(head);
	
	int k, data;
	printf("Enter kth position from last to find node data: ");
	scanf("%d", &k);
	
	kFromLast(head, k, &data);
	printf("Data: %d\n",data);
	return 0;
}
